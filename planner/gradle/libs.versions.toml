[versions]

java = "17"
# @see jackson
# @see ktor
# @see kotlinx-coroutines
# Changelog: https://github.com/JetBrains/kotlin/blob/master/ChangeLog.md
# TODO Review validation.mode in gradle.properties when bumping version.
kotlin = "2.1.10"
kotlin-ksp = "2.1.10-1.0.31"
kotlinx-html = "0.7.3"
# @see kotlin
kotlinx-coroutines = "1.10.1"
kotlinx-serialization = "1.8.0"
# TODO review TODELs with detekt mentioned in them.
detekt = "1.23.8"

dagger = "2.55"

# http://ktor.io/quickstart/quickstart/intellij-idea/gradle.html
# `maven { name = "ktor"; url = "https://dl.bintray.com/kotlin/ktor" }`
ktor = "2.3.13"

appengine = "2.8.3"

# To be sure neo4j and neo4j-ogm are compatible,
# Make sure to match supporting version at https://neo4j.com/developer/neo4j-ogm/#reference:getting-started:versions.
# @see log4j should match shaded dependency in [https://github.com/neo4j/neo4j/blob/4.2/pom.xml](neo4j)
# Artifacts: https://mvnrepository.com/artifact/org.neo4j/neo4j
# Artifacts: https://mvnrepository.com/artifact/org.neo4j.test/neo4j-harness
# Changelog: https://github.com/neo4j/neo4j/wiki/Changelog
# Upgrades: https://neo4j.com/docs/upgrade-migration-guide/current/
neo4j = "2025.02.0"
# Artifacts: https://mvnrepository.com/artifact/org.neo4j.driver/neo4j-java-driver
# Changelog: https://github.com/neo4j/neo4j-java-driver/wiki
neo4j-java = "5.28.1"
# Artifacts: https://mvnrepository.com/artifact/org.neo4j/neo4j-ogm
# Changelog: https://github.com/neo4j/neo4j-ogm/blob/master/CHANGES.adoc
neo4j-ogm = "4.0.16"

jackson = "2.18.3"
jackson-databind = "2.18.3"

slf4j = "2.0.17"
log4j = "2.24.3"
jansi = "2.4.1"

test-junit-vintage = "4.13.2"
test-junit-jupiter = "5.12.0"
test-junit-pioneer = "2.3.0"

test-hamcrest = "3.0"
test-shazamcrest = "0.11"
test-jsonAssert = "1.5.3"
test-assertj = "3.27.3"

test-jfixture = "2.7.2"

test-mockito = "5.15.2"
test-mockito-kotlin = "5.4.0"

test-selenium = "4.29.0"
test-ngWebDriver = "1.2"

[libraries]

detekt-gradle = { module = "io.gitlab.arturbosch.detekt:detekt-gradle-plugin", version.ref = "detekt" }
appengine-gradle = { module = "com.google.cloud.tools:appengine-gradle-plugin", version.ref = "appengine" }

kotlin-bom = { module = "org.jetbrains.kotlin:kotlin-bom", version.ref = "kotlin" }
kotlin-stdlib = { module = "org.jetbrains.kotlin:kotlin-stdlib", version.ref = "kotlin" }
kotlin-reflect = { module = "org.jetbrains.kotlin:kotlin-reflect", version.ref = "kotlin" }
kotlin-stdlib8 = { module = "org.jetbrains.kotlin:kotlin-stdlib-jdk8", version.ref = "kotlin" }
kotlin-gradle = { module = "org.jetbrains.kotlin:kotlin-gradle-plugin", version.ref = "kotlin" }
kotlin-gradle-ksp = { module = "com.google.devtools.ksp:com.google.devtools.ksp.gradle.plugin", version.ref = "kotlin-ksp" }
kotlin-serialization-gradle = { module = "org.jetbrains.kotlin:kotlin-serialization", version.ref = "kotlin" }
kotlinx-coroutines-core = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "kotlinx-coroutines" }
kotlinx-serialization-json = { module = "org.jetbrains.kotlinx:kotlinx-serialization-json", version.ref = "kotlinx-serialization" }

dagger = { module = "com.google.dagger:dagger", version.ref = "dagger" }
dagger-compiler = { module = "com.google.dagger:dagger-compiler", version.ref = "dagger" }

ktor-client = { module = "io.ktor:ktor-client-core", version.ref = "ktor" }
ktor-client-content = { module = "io.ktor:ktor-client-content-negotiation", version.ref = "ktor" }
ktor-client-logging = { module = "io.ktor:ktor-client-logging", version.ref = "ktor" }
ktor-client-engine-okhttp = { module = "io.ktor:ktor-client-okhttp", version.ref = "ktor" }
ktor-client-mock = { module = "io.ktor:ktor-client-mock", version.ref = "ktor" }

ktor-serialization-jackson = { module = "io.ktor:ktor-serialization-jackson", version.ref = "ktor" }

ktor-server = { module = "io.ktor:ktor-server-core", version.ref = "ktor" }
ktor-server-test = { module = "io.ktor:ktor-server-tests", version.ref = "ktor" }
ktor-server-auth = { module = "io.ktor:ktor-server-auth", version.ref = "ktor" }
ktor-server-caching = { module = "io.ktor:ktor-server-caching-headers", version.ref = "ktor" }
ktor-server-compression = { module = "io.ktor:ktor-server-compression", version.ref = "ktor" }
ktor-server-content = { module = "io.ktor:ktor-server-content-negotiation", version.ref = "ktor" }
ktor-server-content-html = { module = "io.ktor:ktor-server-html-builder", version.ref = "ktor" }
ktor-server-content-freemarker = { module = "io.ktor:ktor-server-freemarker", version.ref = "ktor" }
ktor-server-engine-netty = { module = "io.ktor:ktor-server-netty", version.ref = "ktor" }
ktor-server-headers = { module = "io.ktor:ktor-server-default-headers", version.ref = "ktor" }
ktor-server-logging = { module = "io.ktor:ktor-server-call-logging", version.ref = "ktor" }
ktor-server-resources = { module = "io.ktor:ktor-server-resources", version.ref = "ktor" }
ktor-server-status = { module = "io.ktor:ktor-server-status-pages", version.ref = "ktor" }

# See https://neo4j.com/docs/ogm-manual/current/
neo4j-ogm = { module = "org.neo4j:neo4j-ogm-core", version.ref = "neo4j-ogm" }
neo4j-ogm-driver = { module = "org.neo4j.driver:neo4j-java-driver", version.ref = "neo4j-java" }
neo4j-ogm-driver-bolt = { module = "org.neo4j:neo4j-ogm-bolt-driver", version.ref = "neo4j-ogm" }

neo4j = { module = "org.neo4j:neo4j", version.ref = "neo4j" }
# When using this, mind https://github.com/neo4j/neo4j/issues/12770.
# To work around, use (applied in root Gradle): Project.configureSLF4JBindings()
neo4j-harness = { module = "org.neo4j.test:neo4j-harness", version.ref = "neo4j" }

jackson-databind = { module = "com.fasterxml.jackson.core:jackson-databind", version.ref = "jackson-databind" }
jackson-dataformat-xml = { module = "com.fasterxml.jackson.dataformat:jackson-dataformat-xml", version.ref = "jackson" }
jackson-module-kotlin = { module = "com.fasterxml.jackson.module:jackson-module-kotlin", version.ref = "jackson" }
jackson-datatype-java8 = { module = "com.fasterxml.jackson.datatype:jackson-datatype-jsr310", version.ref = "jackson" }

slf4j-core = { module = "org.slf4j:slf4j-api", version.ref = "slf4j" }
slf4j-log4j12 = { module = "org.slf4j:slf4j-log4j12", version.ref = "slf4j" }
slf4j-jul = { module = "org.slf4j:jul-to-slf4j", version.ref = "slf4j" }
slf4j-nop = { module = "org.slf4j:slf4j-nop", version.ref = "slf4j" }

log4j-core = { module = "org.apache.logging.log4j:log4j-core", version.ref = "log4j" }
log4j-api = { module = "org.apache.logging.log4j:log4j-api", version.ref = "log4j" }
# See https://logging.apache.org/log4j/2.x/log4j-slf4j-impl/index.html
log4j-slf4j = { module = "org.apache.logging.log4j:log4j-slf4j2-impl", version.ref = "log4j" }
log4j-jul = { module = "org.apache.logging.log4j:log4j-jul", version.ref = "log4j" }
jansi = { module = "org.fusesource.jansi:jansi", version.ref = "jansi" }

test-selenium = { module = "org.seleniumhq.selenium:selenium-java", version.ref = "test-selenium" }
test-selenium-angular = { module = "com.paulhammant:ngwebdriver", version.ref = "test-ngWebDriver" }

test-junit-jupiter = { module = "org.junit.jupiter:junit-jupiter-api", version.ref = "test-junit-jupiter" }
test-junit-jupiter-engine = { module = "org.junit.jupiter:junit-jupiter-engine", version.ref = "test-junit-jupiter" }
test-junit-jupiter-params = { module = "org.junit.jupiter:junit-jupiter-params", version.ref = "test-junit-jupiter" }
test-junit-vintage = { module = "junit:junit", version.ref = "test-junit-vintage" }
test-junit-pioneer = { module = "org.junit-pioneer:junit-pioneer", version.ref = "test-junit-pioneer" }

test-hamcrest = { module = "org.hamcrest:hamcrest-core", version.ref = "test-hamcrest" }
test-shazamcrest = { module = "com.shazam:shazamcrest", version.ref = "test-shazamcrest" }
test-jsonAssert = { module = "org.skyscreamer:jsonassert", version.ref = "test-jsonAssert" }
test-assertj = { module = "org.assertj:assertj-core", version.ref = "test-assertj" }

test-jfixture = { module = "com.flextrade.jfixture:jfixture", version.ref = "test-jfixture" }

test-mockito = { module = "org.mockito:mockito-core", version.ref = "test-mockito" }
test-mockito-kotlin = { module = "org.mockito.kotlin:mockito-kotlin", version.ref = "test-mockito-kotlin" }
test-mockito-jupiter = { module = "org.mockito:mockito-junit-jupiter", version.ref = "test-mockito" }

[bundles]
log4j = ["log4j-api", "log4j-core", "log4j-slf4j"]

[plugins]
detekt = { id = "io.gitlab.arturbosch.detekt", version.ref = "detekt" }
# From `com.google.cloud.tools:appengine-gradle-plugin`
appengine-yaml = { id = "com.google.cloud.tools.appengine-appyaml", version.ref = "appengine" }
