[versions]

# @see jackson
# @see ktor
# @see kotlinx-coroutines
# Changelog: https://github.com/JetBrains/kotlin/blob/master/ChangeLog.md
kotlin = "1.6.20"
kotlinx-html = "0.7.3"
# @see kotlin
kotlinx-coroutines = "1.5.2"

dagger = "2.42"

# @see neo4j should be listed in https://neo4j.com/developer/neo4j-ogm/#reference:getting-started:versions
neo4j-ogm = "3.2.25"

# https://mvnrepository.com/artifact/org.neo4j.test/neo4j-harness
# Match version of DB at https://console.neo4j.io/#databases, exactly to minor.
# @see neo4j-ogm should match supporting version at https://neo4j.com/developer/neo4j-ogm/#reference:getting-started:versions
# @see log4j2 should match shaded dependency in [https://github.com/neo4j/neo4j/blob/4.2/pom.xml](neo4j)
neo4j = "4.2.4"

jackson = "2.13.2"

slf4j = "1.7.31"

test-junit-vintage = "4.13.2"
# @see test-junit-platform
test-junit-jupiter = "5.7.2"
# @see test-junit-jupiter
test-junit-platform = "1.7.2"

test-jfixture = "2.7.2"

test-mockito = "3.2.4"
test-mockito-kotlin = "2.2.0"

[libraries]

kotlin-bom = { module = "org.jetbrains.kotlin:kotlin-bom", version.ref = "kotlin" }
kotlin-stdlib = { module = "org.jetbrains.kotlin:kotlin-stdlib", version.ref = "kotlin" }
kotlin-reflect = { module = "org.jetbrains.kotlin:kotlin-reflect", version.ref = "kotlin" }
kotlin-stdlib8 = { module = "org.jetbrains.kotlin:kotlin-stdlib-jdk8", version.ref = "kotlin" }
kotlin-plugin = { module = "org.jetbrains.kotlin:kotlin-gradle-plugin", version.ref = "kotlin" }
kotlinx-coroutines-core = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "kotlinx-coroutines" }

dagger = { module = "com.google.dagger:dagger", version.ref = "dagger" }
dagger-apt = { module = "com.google.dagger:dagger-compiler", version.ref = "dagger" }

# Warning "The following annotation processors were detected on the compile classpath:"
#  * 'org.neo4j.kernel.impl.annotations.ServiceProcessor'
#  * 'org.neo4j.kernel.impl.annotations.DocumentationProcessor'
#
# Solution (remove processors): `exclude module: 'neo4j-kernel'`
#
# Solution (disable classpath detection):
# ```kotlin
# plugins.withId("org.jetbrains.kotlin.kapt") {
#     val kapt = this@allprojects.extensions.getByName<KaptExtension>("kapt")
#     kapt.apply {
#       includeCompileClasspath = false
#     }
# }
# ```
# @see [https://neo4j.com/docs/ogm-manual/current/]
neo4j-ogm = { module = "org.neo4j:neo4j-ogm-core", version.ref = "neo4j-ogm" }
neo4j-ogm-driver = { module = "org.neo4j.driver:neo4j-java-driver", version.ref = "neo4j" }
neo4j-ogm-driver-bolt = { module = "org.neo4j:neo4j-ogm-bolt-driver", version.ref = "neo4j-ogm" }

#  * [Opt-in to use native types](https://neo4j.com/docs/ogm-manual/current/reference/#reference:native-property-types:optin)
#  * [Native vs Java 8 types](https://neo4j.com/docs/ogm-manual/current/reference/#reference:native-property-types:mapping)
#  * [Cypher temporal functions](https://neo4j.com/docs/cypher-manual/current/syntax/temporal/)
neo4j-ogm-driver-bolt-nativeTypes = { module = "org.neo4j:neo4j-ogm-bolt-native-types", version.ref = "neo4j-ogm" }

# When using this, mind https://github.com/neo4j/neo4j/issues/12770.
# To work around, use:
# ```
# testImplementation(libs.neo4j.harness) {
#     exclude(group = libs.slf4j.nop.get().module.group, module = libs.slf4j.nop.get().module.name)
# }
# ```
neo4j-harness = { module = "org.neo4j.test:neo4j-harness", version.ref = "neo4j" }

jackson-databind = { module = "com.fasterxml.jackson.core:jackson-databind", version.ref = "jackson" }
jackson-dataformat-xml = { module = "com.fasterxml.jackson.dataformat:jackson-dataformat-xml", version.ref = "jackson" }
jackson-module-kotlin = { module = "com.fasterxml.jackson.module:jackson-module-kotlin", version.ref = "jackson" }
jackson-datatype-java8 = { module = "com.fasterxml.jackson.datatype:jackson-datatype-jsr310", version.ref = "jackson" }

slf4j-core = { module = "org.slf4j:slf4j-api", version.ref = "slf4j" }
slf4j-log4j12 = { module = "org.slf4j:slf4j-log4j12", version.ref = "slf4j" }
slf4j-jul = { module = "org.slf4j:jul-to-slf4j", version.ref = "slf4j" }
slf4j-nop = { module = "org.slf4j:slf4j-nop", version.ref = "slf4j" }

test-junit-platform = { module = "org.junit.platform:junit-platform-launcher", version.ref = "test-junit-platform" }
test-junit-jupiter = { module = "org.junit.jupiter:junit-jupiter-api", version.ref = "test-junit-jupiter" }
test-junit-jupiter-engine = { module = "org.junit.jupiter:junit-jupiter-engine", version.ref = "test-junit-jupiter" }
test-junit-vintage = { module = "junit:junit", version.ref = "test-junit-vintage" }

test-jfixture = { module = "com.flextrade.jfixture:jfixture", version.ref = "test-jfixture" }

# TODO why am I using both?
test-mockito = { module = "org.mockito:mockito-core", version.ref = "test-mockito" }
test-mockito-inline = { module = "org.mockito:mockito-inline", version.ref = "test-mockito" }
test-mockito-kotlin = { module = "com.nhaarman.mockitokotlin2:mockito-kotlin", version.ref = "test-mockito-kotlin" }

[bundles]

[plugins]
