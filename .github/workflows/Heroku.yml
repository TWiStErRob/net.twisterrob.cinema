name: Heroku
on:
  push
concurrency:
  # Documentation suggests ${{ github.head_ref }}, but that's only available on pull_request/pull_request_target triggers, so using ${{ github.ref }}.
  # On master, we want all builds to complete even if merging happens faster to make it easier to discover at which point something broke.
  # More info: https://stackoverflow.com/a/68422069/253468:
  group: ${{ github.ref == 'refs/heads/master' && format('ci-master-{0}', github.sha) || format('ci-{0}', github.ref) }}
  cancel-in-progress: true
jobs:
  check-gradle:
    name: 1 ðŸ”¨ Build & Check (Gradle)
    # https://github.com/actions/virtual-environments/blob/main/images/linux/Ubuntu2004-README.md
    runs-on: ubuntu-20.04
    # A run took 5.5 minutes, give it a bit of a buffer and constrain.
    timeout-minutes: 10
    env:
      # Set up URL so that Dagger can create the default component. It shouldn't be used in tests anyway.
      NEO4J_URL: neo4j+s://neo4j-fake-user:neo4j-fake-password@neo4j-fake-host
      # Default on ubuntu-20.04 image:
      # > OpenJDK Runtime Environment AdoptOpenJDK-11.0.11+9 (build 11.0.11+9)
      #JAVA_HOME: ${{ env.JAVA_HOME_11_X64 }}
    steps:
      - name: Checkout ${{ github.ref }} branch in ${{ github.repository }} repository.
        uses: actions/checkout@v2

      - name: Download Gradle running the build.
        working-directory: Heroku
        run: |
          # Run a no-op gradlew command in workspace.
          ./gradlew --no-daemon --version | tee gradle.version.log
          # Capture version for later usage.
          # Note: the $ is very important no prevent matching the "Welcome to Gradle x.y.z!" line.
          grep --color=never --only-matching --perl-regexp '(?<=Gradle )(\d+\.\d+(?:\.\d+)?)$' gradle.version.log > gradle.version
          echo "GRADLE_VERSION=$(<gradle.version)" | tee --append $GITHUB_ENV

      - name: Cache Gradle ${{ env.GRADLE_VERSION }} files.
        uses: actions/cache@v2
        with:
          path: |
            # Prevent "Downloading https://services.gradle.org/distributions/gradle-${{ env.GRADLE_VERSION }}-all.zip"
            # Prevent "Unzipping /home/${{ env.USER }}/.gradle/wrapper/dists/gradle-${{ env.GRADLE_VERSION }}-all/${ gradle-dist-hash }/gradle-${{ env.GRADLE_VERSION }}-all.zip"
            # No need to cache this, as it's cached by default, it takes 4-11 seconds only to do it fresh.
            #~/.gradle/wrapper/dists/gradle-${{ env.GRADLE_VERSION }}-all/

            # Prevent "Download https://repo1.maven.org/maven2/" during build
            ~/.gradle/caches/modules-2/

            # Prevent "Generating JAR file 'gradle-api-${{ env.GRADLE_VERSION }}.jar'" during build
            ~/.gradle/caches/${{ env.GRADLE_VERSION }}/generated-gradle-jars/
          key: ${{ runner.os }}-gradle-${{ env.GRADLE_VERSION }}-${{ hashFiles('**/gradle-wrapper.properties', '**/*.gradle*', 'buildSrc/src/**') }}
          restore-keys: |
            ${{ runner.os }}-gradle-${{ env.GRADLE_VERSION }}-

      - name: Build Heroku.
        working-directory: Heroku
        run: ./gradlew --no-daemon --no-build-cache --stacktrace assemble testClasses

      - name: Test Heroku.
        working-directory: Heroku
        run: >
          ./gradlew
          --no-daemon
          --no-build-cache
          --stacktrace
          check tests
          -Pnet.twisterrob.build.verboseReports=true

      - name: Upload "Heroku Test Results XMLs".
        if: success() || failure()
        uses: actions/upload-artifact@v2
        with:
          name: Heroku Test Results XMLs
          path: ${{ github.workspace }}/**/build/test-results/*/TEST-*.xml

      - name: Upload "Heroku Test Results HTML".
        if: success() || failure()
        uses: actions/upload-artifact@v2
        with:
          name: Heroku Test Results HTML
          path: ${{ github.workspace }}/Heroku/build/reports/tests/all/

      - name: Upload "Heroku Test Results HTMLs".
        if: success() || failure()
        uses: actions/upload-artifact@v2
        with:
          name: Heroku Test Results HTMLs
          path: ${{ github.workspace }}/**/build/reports/tests/*/

      - name: Cleanup Gradle files before caching.
        run: |
          # Don't cache lock files to prevent breaking future builds
          rm -f  ~/.gradle/caches/modules-2/modules-2.lock
          rm -f  ~/.gradle/caches/modules-2/gc.properties
          rm -fr ~/.gradle/caches/*/plugin-resolution/

  # Separate job for parsing the XML output, since the matrix runs on multiple machines.
  publish-test-results-gradle:
    name: 2 ðŸ“¢ Publish Tests Results
    runs-on: ubuntu-latest
    needs: check-gradle
    # The dependency job might be skipped, we don't need to run this job then.
    if: success() || failure()
    # Should finish under 2 minutes on success, so give it a big buffer in case failures take more time.
    timeout-minutes: 5

    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts

      #- name: Display structure of downloaded files
      #  run: ls -R
      #  working-directory: artifacts

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1
        with:
          check_name: 0 ðŸ”” Test Results
          comment_title: Test Results
          report_individual_runs: true
          test_changes_limit: 0
          files: artifacts/Heroku Test Results XMLs/**/*.xml
  check-npm:
    name: 1 ðŸ”¨ Build & Check (NPM)
    # https://github.com/actions/virtual-environments/blob/main/images/linux/Ubuntu2004-README.md
    runs-on: ubuntu-20.04
    # TODO Don't know how fast yet.
    #timeout-minutes: 10
    env:
      NEO4J_URL: ${{ secrets.NEO4J_URL }}
    steps:
      - name: Checkout ${{ github.ref }} branch in ${{ github.repository }} repository.
        uses: actions/checkout@v2

      - name: Downgrade node from v14.17.6/6.14.15 to v8.17.0/6.13.4.
        uses: actions/setup-node@v2
        with:
          node-version: '8'

      - name: Install Dependencies
        working-directory: Heroku
        run: |
          node -v
          npm -v
          npm install

      - name: Test
        working-directory: Heroku
        run: npm run test

      - name: Build Frontend
        working-directory: Heroku/frontend
        run: |
          npm run build-dev
          npm run build-prod

      - name: Start Sync
        working-directory: Heroku
        run: |
          gradlew --no-daemon :backend:sync:run &
          echo "PID_SYNC=$!" | tee --append $GITHUB_ENV
          # Wait a bit so it actually does its job.
          sleep 10

      - name: Start Backend
        working-directory: Heroku
        run: |
          gradlew --no-daemon :backend:endpoint:run --args "../../deploy/static ../src/test/fake/protractor" &
          echo "PID_ENDPOINT=$!" | tee --append $GITHUB_ENV

      - name: Start Frontend
        working-directory: Heroku/frontend
        run: |
          npm run start &
          echo "PID_FRONTEND=$!" | tee --append $GITHUB_ENV

      - name: Start Selenium
        working-directory: Heroku/test
        run: |
          npm run selenium &
          echo "PID_SELENIUM=$!" | tee --append $GITHUB_ENV

      - name: Run Protractor tests
        working-directory: Heroku/test
        run: npm run protractor

      - name: Stop Sync (at ${{ env.PID_SYNC }})
        if: always()
        run: kill ${{ env.PID_SYNC }}

      - name: Stop Backend (at ${{ env.PID_ENDPOINT }})
        if: always()
        run: kill ${{ env.PID_ENDPOINT }}

      - name: Stop Frontend (at ${{ env.PID_FRONTEND }})
        if: always()
        run: kill ${{ env.PID_FRONTEND }}

      - name: Stop Selenium (at ${{ env.PID_SELENIUM }})
        if: always()
        run: kill ${{ env.PID_SELENIUM }}
