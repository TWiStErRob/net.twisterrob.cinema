name: Heroku
on:
  push:
    branches-ignore:
      - 'release'
    paths:
      - 'Heroku/**'
      - '.github/workflows/Heroku.yml'
concurrency:
  # Documentation suggests ${{ github.head_ref }}, but that's only available on pull_request/pull_request_target triggers, so using ${{ github.ref }}.
  # On master, we want all builds to complete even if merging happens faster to make it easier to discover at which point something broke.
  # More info: https://stackoverflow.com/a/68422069/253468:
  group: ${{ github.ref == 'refs/heads/master' && format('ci-heroku-master-{0}', github.sha) || format('ci-heroku-{0}', github.ref) }}
  cancel-in-progress: true
#env:
#  # Choose Java 17 explicitly via setup-java.
#  # https://github.com/actions/runner-images/blob/main/images/linux/Ubuntu2204-Readme.md#java
#  # Don't set it here or even on the jobs, because this doesn't run on a runner, variables not available.
#  JAVA_HOME: ${{ env.JAVA_HOME_17_X64 }}
jobs:
  # Expected result: success() or failure().
  # If a static check fails, it'll be reported separately.
  # If a test fails, this will fail. TODO move to reporting.
  check-gradle:
    name: ðŸ”¨ Build & Check (Gradle)
    runs-on: ubuntu-22.04
    # A run took 5.5 minutes, give it a bit of a buffer and constrain.
    timeout-minutes: 20
    env:
      # Set up URL so that Dagger can create the default component. It shouldn't be used in tests anyway.
      NEO4J_URL: neo4j+s://neo4j-fake-user:neo4j-fake-password@neo4j-fake-host
    steps:

      - name: Set up JDK 17.
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin

      - name: Checkout ${{ github.ref }} branch in ${{ github.repository }} repository.
        uses: actions/checkout@v3

      - name: Validate Gradle Wrapper JARs.
        uses: gradle/wrapper-validation-action@v1

      - name: Download Gradle running the build.
        working-directory: Heroku
        run: |
          # Run a no-op gradlew command in workspace.
          ./gradlew --no-daemon --version | tee gradle.version.log
          # Capture version for later usage.
          # Note: the $ is very important no prevent matching the "Welcome to Gradle x.y.z!" line.
          grep --color=never --only-matching --perl-regexp '(?<=Gradle )(\d+\.\d+(?:\.\d+)?(?:-rc-\d+)?)$' gradle.version.log > gradle.version
          echo "GRADLE_VERSION=$(<gradle.version)" | tee --append $GITHUB_ENV

      - name: Cache Gradle ${{ env.GRADLE_VERSION }} files.
        uses: actions/cache@v3
        with:
          path: |
            # Prevent "Downloading https://services.gradle.org/distributions/gradle-${{ env.GRADLE_VERSION }}-all.zip"
            # Prevent "Unzipping /home/${{ env.USER }}/.gradle/wrapper/dists/gradle-${{ env.GRADLE_VERSION }}-all/${ gradle-dist-hash }/gradle-${{ env.GRADLE_VERSION }}-all.zip"
            # No need to cache this, as it's cached by default, it takes 4-11 seconds only to do it fresh.
            #~/.gradle/wrapper/dists/gradle-${{ env.GRADLE_VERSION }}-all/

            # Prevent "Download https://repo1.maven.org/maven2/" during build
            ~/.gradle/caches/modules-2/

            # Prevent "Generating JAR file 'gradle-api-${{ env.GRADLE_VERSION }}.jar'" during build
            ~/.gradle/caches/${{ env.GRADLE_VERSION }}/generated-gradle-jars/
          key: ${{ runner.os }}-gradle-${{ env.GRADLE_VERSION }}-${{ hashFiles('**/gradle-wrapper.properties', '**/*.gradle*', 'buildSrc/src/**') }}
          restore-keys: |
            ${{ runner.os }}-gradle-${{ env.GRADLE_VERSION }}-


      - name: Check Heroku with Detekt.
        working-directory: Heroku
        run: >
          ./gradlew
          --no-daemon
          --no-build-cache
          --stacktrace
          :plugins:detektEach
          detektMain
          detektTest
          detektTestFixtures
          :detektReportMergeSarif

      - name: Upload "Heroku Detekt Results".
        if: success() || failure()
        uses: actions/upload-artifact@v3
        with:
          name: Heroku Detekt Results
          path: ${{ github.workspace }}/Heroku/**/build/reports/detekt/*

      - name: Publish "Code scanning results / detekt".
        uses: github/codeql-action/upload-sarif@v2
        if: success() || failure()
        with:
          sarif_file: ${{ github.workspace }}/Heroku/build/reports/detekt/merge.sarif

      - name: Build Heroku.
        working-directory: Heroku
        run: >
          ./gradlew
          --no-daemon
          --no-build-cache
          --stacktrace
          --continue
          assemble testClasses


      - name: Test Heroku.
        working-directory: Heroku
        run: >
          ./gradlew
          --no-daemon
          --no-build-cache
          --stacktrace
          --continue
          tests :allTestsReport
          -Pnet.twisterrob.build.verboseReports=true
          -Pnet.twisterrob.build.testConcurrencyOverride=PerSuite

      - name: Upload "Heroku Test Results XMLs" artifact.
        if: success() || failure()
        uses: actions/upload-artifact@v3
        with:
          name: Heroku Test Results XMLs
          path: ${{ github.workspace }}/Heroku/**/build/test-results/*/TEST-*.xml

      - name: Upload "Heroku Test Results HTML" artifact.
        if: success() || failure()
        uses: actions/upload-artifact@v3
        with:
          name: Heroku Test Results HTML
          path: ${{ github.workspace }}/Heroku/build/reports/tests/all/

      - name: Upload "Heroku Test Results HTMLs" artifact.
        if: success() || failure()
        uses: actions/upload-artifact@v3
        with:
          name: Heroku Test Results HTMLs
          path: ${{ github.workspace }}/Heroku/**/build/reports/tests/*/

      - name: Publish "ðŸ”” Test Results" check run.
        if: success() || failure()
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          check_name: ðŸ”” Test Results
          comment_mode: off
          report_individual_runs: true
          test_changes_limit: 0
          junit_files: ${{ github.workspace }}/Heroku/**/build/test-results/*/TEST-*.xml

      - name: Cleanup Gradle files before caching.
        run: |
          # Don't cache lock files to prevent breaking future builds
          rm -f  ~/.gradle/caches/modules-2/modules-2.lock
          rm -f  ~/.gradle/caches/modules-2/gc.properties
          rm -fr ~/.gradle/caches/*/plugin-resolution/


  pull_request:
    name: Find PR
    # Don't execute on master, it'll never be PR'd.
    if: github.ref != 'refs/heads/master' && (success() || failure())
    runs-on: ubuntu-22.04
    timeout-minutes: 1
    outputs:
      found: ${{ steps.current_pr.outputs.number != null }}
      # Simulate github.event.pull_request.base.ref on push trigger.
      base_ref: ${{ steps.current_pr.outputs.number != null && fromJSON(steps.current_pr.outputs.pr).base.ref }}
      base_sha: ${{ steps.current_pr.outputs.number != null && fromJSON(steps.current_pr.outputs.pr).base.sha }}
      # Simulate github.event.pull_request.head.ref on push trigger.
      head_ref: ${{ steps.current_pr.outputs.number != null && fromJSON(steps.current_pr.outputs.pr).head.ref }}
      head_sha: ${{ steps.current_pr.outputs.number != null && fromJSON(steps.current_pr.outputs.pr).head.sha }}
    steps:
      - name: "Determine which PR this commit belongs to, so we can clone its base branch for comparison."
        id: current_pr
        uses: 8BitJonny/gh-get-current-pr@v2.2.0

      - name: "Pull Request #${{ steps.current_pr.outputs.number }}"
        run: true


  deps:
    name: Calculate Dependency Diff
    needs: pull_request
    if: needs.pull_request.outputs.found == 'true'
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    steps:

      - name: Set up JDK 17.
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin

      - name: Checkout ${{ needs.pull_request.outputs.base_ref }} branch in ${{ github.repository }} repository.
        uses: actions/checkout@v3
        with:
          ref: ${{ format('refs/heads/{0}', needs.pull_request.outputs.base_ref) }}

      - name: Get the script from ${{ needs.pull_request.outputs.head_ref }} branch (so both head and base run the same command).
        run: |
          git fetch
          git restore --source refs/remotes/origin/${{ needs.pull_request.outputs.head_ref }} -- Heroku/scripts/dependencies.sh

      - name: Dump Heroku Dependencies on branch ${{ needs.pull_request.outputs.base_ref }}.
        working-directory: Heroku
        run: scripts/dependencies.sh

      # Work around "least common ancestor" upload feature by uploading twice to the same artifact.
      # https://github.com/actions/upload-artifact#upload-using-multiple-paths-and-exclusions
      - name: Upload "Heroku Dependencies - Base" artifact (part 1/2 - dependencies).
        if: success() || failure()
        uses: actions/upload-artifact@v3
        with:
          name: Heroku Dependencies - Base
          if-no-files-found: error
          path: ${{ github.workspace }}/Heroku/*.dependencies
      - name: Upload "Heroku Dependencies - Base" artifact (part 2/2 - lockfiles).
        if: success() || failure()
        uses: actions/upload-artifact@v3
        with:
          name: Heroku Dependencies - Base
          # Cannot error on this yet, because `master` has no dependencyLocking set up.
          if-no-files-found: warn
          path: ${{ github.workspace }}/Heroku/gradle/dependency-locks/*.lockfile


      - name: Checkout ${{ needs.pull_request.outputs.head_ref }} branch in ${{ github.repository }} repository.
        uses: actions/checkout@v3
        with:
          ref: ${{ format('refs/heads/{0}', needs.pull_request.outputs.head_ref) }}

      - name: Dump Heroku Dependencies on branch ${{ needs.pull_request.outputs.head_ref }}.
        working-directory: Heroku
        run: scripts/dependencies.sh

      # Work around "least common ancestor" upload feature by uploading twice to the same artifact.
      # https://github.com/actions/upload-artifact#upload-using-multiple-paths-and-exclusions
      - name: Upload "Heroku Dependencies" artifact (part 1/2 - dependencies).
        if: success() || failure()
        uses: actions/upload-artifact@v3
        with:
          name: Heroku Dependencies
          if-no-files-found: error
          path: ${{ github.workspace }}/Heroku/*.dependencies
      - name: Upload "Heroku Dependencies" artifact (part 2/2 - lockfiles).
        if: success() || failure()
        uses: actions/upload-artifact@v3
        with:
          name: Heroku Dependencies
          if-no-files-found: error
          path: ${{ github.workspace }}/Heroku/gradle/dependency-locks/*.lockfile


      - name: Download "Heroku Dependencies - Base" artifact.
        uses: actions/download-artifact@v3
        with:
          name: Heroku Dependencies - Base
          path: diff/prev

      - name: Download "Heroku Dependencies" artifact.
        uses: actions/download-artifact@v3
        with:
          name: Heroku Dependencies
          path: diff/curr

      - name: Diff lockfiles using unix diff.
        working-directory: diff
        env:
          BASE: ${{ needs.pull_request.outputs.base_ref }} - ${{ needs.pull_request.outputs.base_sha }}
          HEAD: ${{ needs.pull_request.outputs.head_ref }} - ${{ needs.pull_request.outputs.head_sha }}
        run: |
          diff --version
          diff-lockfile() {
          	echo "diff --unified=3 --new-file --text --minimal \"prev/$1.lockfile\" \"curr/$1.lockfile\" > \"$1.lockfile.diff\"";
          	(
          		# Sub-shell without auto-exit on error. Idea from https://superuser.com/a/1266910/145861.
          		set +e;
          		diff --unified=3 --new-file --text --minimal "prev/$1.lockfile" "curr/$1.lockfile" | tail -n+3 > "$1.lockfile.diff";
          		# There's no way to edit local variable of outer shell from sub-shell, so return via file.
          		echo $? > "$1.lockfile.diff.error";
          	)
          	local error=$(cat "$1.lockfile.diff.error");
          	if [ $error -eq 0 ]; then
          		return 0; # Same, all good.
          	elif [ $error -eq 1 ]; then
          		return 0; # Different, not an error, just a fact.
          	else
          		echo "diff returned exit code $error.";
          		return 1; # Problem, a big one, see log for details.
          	fi
          }
          
          diff-lockfile "backend"
          diff-lockfile "backend-database"
          diff-lockfile "backend-endpoint"
          diff-lockfile "backend-feed"
          diff-lockfile "backend-network"
          diff-lockfile "backend-quickbook"
          diff-lockfile "backend-sync"
          diff-lockfile "plugins"
          diff-lockfile "plugins-settings"
          diff-lockfile "root"
          diff-lockfile "root-settings"
          diff-lockfile "test-helpers"

      - name: Diff dependencies using dependency-tree-diff from Jake Wharton.
        working-directory: diff
        env:
          BASE: ${{ needs.pull_request.outputs.base_ref }} - ${{ needs.pull_request.outputs.base_sha }}
          HEAD: ${{ needs.pull_request.outputs.head_ref }} - ${{ needs.pull_request.outputs.head_sha }}
        run: |
          # TODEL use Jake's version when https://github.com/JakeWharton/dependency-tree-diff/pull/13 gets merged.
          wget https://github.com/TWiStErRob/dependency-tree-diff/releases/download/1.3.0/dependency-tree-diff.jar
          #wget https://github.com/JakeWharton/dependency-tree-diff/releases/download/1.2.0/dependency-tree-diff.jar
          chmod +x ./dependency-tree-diff.jar
          diff-dependency-tree() {
          	./dependency-tree-diff.jar "prev/$1.dependencies" "curr/$1.dependencies" > "$1.dependencies.diff";
          }
          
          diff-dependency-tree "backend"
          diff-dependency-tree "backend-database"
          diff-dependency-tree "backend-endpoint"
          diff-dependency-tree "backend-feed"
          diff-dependency-tree "backend-network"
          diff-dependency-tree "backend-quickbook"
          diff-dependency-tree "backend-sync"
          diff-dependency-tree "plugins"
          diff-dependency-tree "root"
          diff-dependency-tree "test-helpers"

      - name: Generate .patch files from dependency-tree-diff.
        working-directory: diff
        env:
          BASE: ${{ needs.pull_request.outputs.base_ref }} - ${{ needs.pull_request.outputs.base_sha }}
          HEAD: ${{ needs.pull_request.outputs.head_ref }} - ${{ needs.pull_request.outputs.head_sha }}
        run: |
          cp ../Heroku/scripts/dependency-tree-diff-to-patch.sh .
          patch-dependency-tree() {
          	./dependency-tree-diff-to-patch.sh "$1.dependencies.diff" "${BASE}" "${HEAD}" > "$1.dependencies.patch";
          }
          
          patch-dependency-tree "backend"
          patch-dependency-tree "backend-database"
          patch-dependency-tree "backend-endpoint"
          patch-dependency-tree "backend-feed"
          patch-dependency-tree "backend-network"
          patch-dependency-tree "backend-quickbook"
          patch-dependency-tree "backend-sync"
          patch-dependency-tree "plugins"
          patch-dependency-tree "root"
          patch-dependency-tree "test-helpers"

      - name: List diff dir
        working-directory: diff
        run: ls -la

      - name: Disk usage
        working-directory: diff
        run: du -h -d 1

      - name: Disk quota
        working-directory: diff
        run: df

      - name: Merge diffs into a single file (all.dependencies.diff).
        working-directory: diff
        run: |
          # `cat *.dependencies.diff > all.dependencies.diff` with a bit more control and fluff.
          # https://stackoverflow.com/a/2817024 + https://stackoverflow.com/a/7816490 + expansion of flags with `man ls` and `man tail`.
          ls --format=single-column --time=ctime --reverse *.dependencies.diff | xargs tail --lines=+1 > all.dependencies.diff

      - name: Upload "Heroku Dependencies - Diffs" artifact.
        if: success() || failure()
        uses: actions/upload-artifact@v3
        with:
          name: Heroku Dependencies - Diffs
          path: |
            ${{ github.workspace }}/diff/*.dependencies.diff
            ${{ github.workspace }}/diff/*.dependencies.patch
            ${{ github.workspace }}/diff/*.lockfile.diff


      - name: Create "Dependency Diff" check run (if any diffs).
        uses: actions/github-script@v6
        env:
          action_url: 'https://github.com/${{ github.repository }}/actions/workflows/Dependency%20Review.yml?query=branch%3A${{ github.ref }}'
          branch: '${{ github.ref }}'
        with:
          debug: ${{ secrets.ACTIONS_STEP_DEBUG || false }}
          script: |
            const fs = require("fs");
            const moduleData = {
            	":": {diffName: "root", path: ""},
            	": (settings)": {diffName: "root-settings", path: "", type: "settings"},
            	":backend": {diffName: "backend", path: "backend"},
            	":backend:database": {diffName: "backend-database", path: "backend/database"},
            	":backend:endpoint": {diffName: "backend-endpoint", path: "backend/endpoint"},
            	":backend:feed": {diffName: "backend-feed", path: "backend/feed"},
            	":backend:network": {diffName: "backend-network", path: "backend/network"},
            	":backend:quickbook": {diffName: "backend-quickbook", path: "backend/quickbook"},
            	":backend:sync": {diffName: "backend-sync", path: "backend/sync"},
            	":plugins": {diffName: "plugins", path: "gradle/plugins"},
            	":plugins (settings)": {diffName: "plugins-settings", path: "gradle/plugins", type: "settings"},
            	":test-helpers": {diffName: "test-helpers", path: "test-helpers"},
            };
            Object.keys(moduleData).forEach((module) => {
            	const diffPath = `diff/${moduleData[module].diffName}.dependencies.diff`;
            	const patchPath = `diff/${moduleData[module].diffName}.dependencies.patch`;
            	const lockPath = `diff/${moduleData[module].diffName}.lockfile.diff`;
            	moduleData[module].depDiff = fs.existsSync(diffPath) ? fs.readFileSync(diffPath, {encoding: "utf8"}) : null;
            	moduleData[module].depPatch = fs.existsSync(patchPath) ? fs.readFileSync(patchPath, {encoding: "utf8"}) : null;
            	moduleData[module].lockDiff = fs.existsSync(lockPath) ? fs.readFileSync(lockPath, {encoding: "utf8"}) : null;
            });
            Object.keys(moduleData).forEach((module) => {
            	moduleData[module].fullPath = function() {
            		const path = this.path === "" ? "" : "/" + this.path;
            		const name = this.type === "settings" ? "settings.gradle.kts" : "build.gradle.kts";
            		return "Heroku" + path + "/" + name;
            	};
            });
            const hasAnyChanges = Object
            	.keys(moduleData)
            	// "": no diff, null: missing diff, "...": dependency changes
            	.some((moduleName) => {
            		const module = moduleData[moduleName];
            		return module.type !== "settings" && (module.depDiff !== "" || module.lockDiff !== "");
            	});
            
            if (!hasAnyChanges) {
            	// https://docs.github.com/en/rest/commits/statuses#create-a-commit-status
            	await github.rest.repos.createCommitStatus({
            		owner: context.repo.owner,
            		repo: context.repo.repo,
            		sha: context.sha,
            		context: "Heroku / Dependency Review",
            		description: "No dependency changes.",
            		state: "success",
            	});
            	return;
            }
            // https://octokit.github.io/rest.js/v18#checks-create
            const check = await github.rest.checks.create({
            	owner: context.repo.owner,
            	repo: context.repo.repo,
            	head_sha: context.sha,
            	name: "Dependency Diff",
            	status: "completed",
              // Use `action_required` if you want to make it mandatory; `action_required` will show as a "failure" on GitHub PRs.
            	conclusion: "neutral",
            	output: {
            		title: "Dependency Change Report",
            		summary: `
            			To approve/reject these dependency changes \
            			run the ["Dependency Review" workflow](${process.env.action_url}) \
            			with \`workflow_dispatch\` on \`${process.env.branch}\`.
            			
            			## Dependencies Changes
            			_See annotations for more details._
            			| Module | Added* | Removed* |
            			| - | - | - |
            			${Object
            				.keys(moduleData)
            				.map((module) => {
            					function count(diff, prefix) {
            						if (diff === null)
            							return "-";
            						else
            							return (diff.match(new RegExp(`^\\${prefix}`, 'gm')) || []).length;
            					}
            					const addedL = count(moduleData[module].lockDiff, '+');
            					const addedD = count(moduleData[module].depDiff, '+');
            					const removedL = count(moduleData[module].lockDiff, '-');
            					const removedD = count(moduleData[module].depDiff, '-');
            					return `| ${module} | ${addedL} (${addedD}) | ${removedL} (${removedD}) |`
            				})
            				.join("\n")
            			}
            			
            			**\\*** _added/removed in \`lockfile.diff (dependencies.diff)\`._
            		`.replaceAll(/^[ \t]+/mg, ""),
            		annotations: Array.from(function* () {
            			for (const [moduleName, module] of Object.entries(moduleData)) {
            				if (module.lockDiff !== "") {
            					const fileName = `${module.diffName}.lockfile`;
            					yield {
            						path: module.fullPath(),
            						start_line: 0,
            						end_line: 0,
            						annotation_level: module.lockDiff === null ? "warning" : "notice",
            						title: `Lockfile diff for ${moduleName}`,
            						message: `Output of \`diff prev/${fileName} curr/${fileName} > ${fileName}.diff\``,
            						raw_details: module.lockDiff || "Missing lockfile diff!",
            					};
            				}
            				if (module.depDiff !== "" && module.type !== "settings") {
            					const fileIn = `${module.diffName}.dependencies`;
            					const fileOut = `${module.diffName}.dependencies.diff`;
            					yield {
            						path: module.fullPath(),
            						start_line: 0,
            						end_line: 0,
            						annotation_level: module.depDiff === null ? "warning" : "notice",
            						title: `Dependency diff for ${moduleName}`,
            						message: `Output of \`dependency-tree-diff.jar prev/${fileIn} curr/${fileIn} > ${fileOut}\``,
            						raw_details: module.depPatch || "Missing dependency diff!",
            					};
            				}
            			}
            		}())
            	},
            });
            // https://docs.github.com/en/rest/commits/statuses#create-a-commit-status
            await github.rest.repos.createCommitStatus({
            	owner: context.repo.owner,
            	repo: context.repo.repo,
            	sha: context.sha,
            	context: "Heroku / Dependency Review",
            	description: "Review dependency changes!",
              // Use `pending` if you want to make it mandatory; `pending` will block Renovate from merging as the checks are inconclusive.
            	state: "success",
            	target_url: check.data.html_url,
            });


  check-npm:
    name: ðŸ”¨ Build & Check (NPM)
    runs-on: ubuntu-22.04
    # Setup takes 1+3+1 minute, and protractor runs for 7 minutes
    timeout-minutes: 15
    env:
      NEO4J_URL: ${{ secrets.NEO4J_URL }}
      PORT: 8080
    steps:

      - name: Set up JDK 17.
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin

      - name: Checkout ${{ github.ref }} branch in ${{ github.repository }} repository.
        uses: actions/checkout@v3

      - name: Validate Gradle Wrapper JARs.
        uses: gradle/wrapper-validation-action@v1

      # Set the time zone, otherwise 5 Performances display > shows performances tests fail
      # > - Expected By(css selector, .performance) to have text 12:00 but was 11:00
      - uses: szenius/set-timezone@v1.1
        with:
          timezoneLinux: "Europe/London"

      - name: Install Dependencies
        working-directory: Heroku
        run: |
          node -v
          npm -v
          npm install

      - name: Detect Compatible Chrome Driver
        working-directory: Heroku/test/node_modules/webdriver-manager/selenium
        run: |
          google-chrome --version
          grep --version
          curl --version
          echo "Parsing current Chrome version: $(google-chrome --version)"
          export CHROME_FULL_VERSION=$(google-chrome --version)
          echo "CHROME_FULL_VERSION=${CHROME_FULL_VERSION}" | tee --append $GITHUB_ENV
          export CHROME_MINOR_VERSION=$(echo ${CHROME_FULL_VERSION} | grep -oP '(?<=Google Chrome )(\d+\.\d+\.\d+)(?=\.\d+)')
          echo "CHROME_MINOR_VERSION=${CHROME_MINOR_VERSION}" | tee --append $GITHUB_ENV
          echo "Querying latest Chrome Driver version: https://chromedriver.storage.googleapis.com/LATEST_RELEASE_${CHROME_MINOR_VERSION}"
          export CHROME_DRIVER_VERSION=$(curl --output - --silent "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_${CHROME_MINOR_VERSION}")
          echo "CHROME_DRIVER_VERSION=${CHROME_DRIVER_VERSION}" | tee --append $GITHUB_ENV

      - name: Install Compatible Chrome Driver.
        working-directory: Heroku/test
        run: |
          npm run selenium:update -- --versions.chrome ${{ env.CHROME_DRIVER_VERSION }}

      - name: Test
        working-directory: Heroku
        run: |
          npm run test
          cd frontend && npm run build:prod

      # Pre-build artifacts for more immediate and deterministic startup.
      - name: Build Frontend.
        working-directory: Heroku/frontend
        run: npm run build:dev

      - name: Build Sync & Backend.
        working-directory: Heroku
        run: ./gradlew --no-daemon --stacktrace :backend:sync:jar :backend:endpoint:jar

      - name: Start Sync.
        working-directory: Heroku
        run: |
          ./gradlew --no-daemon --stacktrace :backend:sync:run >sync.log 2>&1 &
          echo "PID_SYNC=$!" | tee --append $GITHUB_ENV
          sleep 30

      - name: Start Backend.
        working-directory: Heroku
        run: |
          ./gradlew --no-daemon --stacktrace :backend:endpoint:run \
            --args="-P:twisterrob.cinema.staticRootFolder=../../deploy/frontend/static -P:twisterrob.cinema.fakeRootFolder=../../test/fake-data" \
            >backend.log 2>&1 &
          echo "PID_ENDPOINT=$!" | tee --append $GITHUB_ENV
          sleep 10

      - name: Start Frontend.
        working-directory: Heroku/frontend
        run: |
          npm run start >../frontend.log 2>&1 &
          echo "PID_FRONTEND=$!" | tee --append $GITHUB_ENV
          sleep 10

      - name: Start Selenium.
        working-directory: Heroku/test
        run: |
          npm run selenium -- --versions.chrome ${{ env.CHROME_DRIVER_VERSION }} >../selenium.log 2>&1 &
          echo "PID_SELENIUM=$!" | tee --append $GITHUB_ENV
          sleep 10

      - name: Run Protractor tests.
        working-directory: Heroku/test
        run: |
          mkdir logs
          npm run protractor

      # Note: we always want to kill these processes, and we never care if they actually existed or stopped.
      # `||` at the end ignores the return value, so the step doesn't error but emits a warning instead using:
      # https://docs.github.com/en/actions/reference/workflow-commands-for-github-actions#setting-a-warning-message

      - name: Stop Sync (at ${{ env.PID_SYNC }}).
        if: always()
        run: kill ${{ env.PID_SYNC }} || true
        # This will always be true as sync terminates: echo "::warning file=sync.log::Sync process ${{ env.PID_SYNC }} didn't exist."

      - name: Stop Backend (at ${{ env.PID_ENDPOINT }}).
        if: always()
        run: kill ${{ env.PID_ENDPOINT }} || echo "::warning file=backend.log::Backend process ${{ env.PID_SYNC }} didn't exist."

      - name: Stop Frontend (at ${{ env.PID_FRONTEND }}).
        if: always()
        run: kill ${{ env.PID_FRONTEND }} || echo "::warning file=frontend.log::Frontend process ${{ env.PID_SYNC }} didn't exist."

      - name: Stop Selenium (at ${{ env.PID_SELENIUM }}).
        if: always()
        run: kill ${{ env.PID_SELENIUM }} || echo "::warning file=selenium.log::Selenium process ${{ env.PID_SYNC }} didn't exist."

      - name: Upload "Heroku Test Logs" artifact.
        if: success() || failure()
        uses: actions/upload-artifact@v3
        with:
          name: Heroku Test Logs
          path: |
            ${{ github.workspace }}/Heroku/*.log
            ${{ github.workspace }}/Heroku/test/logs/*
