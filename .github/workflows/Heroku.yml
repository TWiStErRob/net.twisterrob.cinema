name: Heroku
on:
  push:
    branches-ignore:
      - 'heroku'
concurrency:
  # Documentation suggests ${{ github.head_ref }}, but that's only available on pull_request/pull_request_target triggers, so using ${{ github.ref }}.
  # On master, we want all builds to complete even if merging happens faster to make it easier to discover at which point something broke.
  # More info: https://stackoverflow.com/a/68422069/253468:
  group: ${{ github.ref == 'refs/heads/master' && format('ci-master-{0}', github.sha) || format('ci-{0}', github.ref) }}
  cancel-in-progress: true
jobs:
  # Expected result: success() or failure().
  # If a static check fails, it'll be reported separately.
  # If a test fails, this will fail. TODO move to reporting.
  check-gradle:
    name: 1 ðŸ”¨ Build & Check (Gradle)
    # https://github.com/actions/virtual-environments/blob/main/images/linux/Ubuntu2004-README.md
    runs-on: ubuntu-20.04
    # A run took 5.5 minutes, give it a bit of a buffer and constrain.
    timeout-minutes: 15
    env:
      # Set up URL so that Dagger can create the default component. It shouldn't be used in tests anyway.
      NEO4J_URL: neo4j+s://neo4j-fake-user:neo4j-fake-password@neo4j-fake-host
      # Default on ubuntu-20.04 image:
      # > OpenJDK Runtime Environment AdoptOpenJDK-11.0.11+9 (build 11.0.11+9)
      #JAVA_HOME: ${{ env.JAVA_HOME_11_X64 }}
    steps:
      - name: Checkout ${{ github.ref }} branch in ${{ github.repository }} repository.
        uses: actions/checkout@v3

      - name: Download Gradle running the build.
        working-directory: Heroku
        run: |
          # Run a no-op gradlew command in workspace.
          ./gradlew --no-daemon --version | tee gradle.version.log
          # Capture version for later usage.
          # Note: the $ is very important no prevent matching the "Welcome to Gradle x.y.z!" line.
          grep --color=never --only-matching --perl-regexp '(?<=Gradle )(\d+\.\d+(?:\.\d+)?)$' gradle.version.log > gradle.version
          echo "GRADLE_VERSION=$(<gradle.version)" | tee --append $GITHUB_ENV

      - name: Cache Gradle ${{ env.GRADLE_VERSION }} files.
        uses: actions/cache@v3
        with:
          path: |
            # Prevent "Downloading https://services.gradle.org/distributions/gradle-${{ env.GRADLE_VERSION }}-all.zip"
            # Prevent "Unzipping /home/${{ env.USER }}/.gradle/wrapper/dists/gradle-${{ env.GRADLE_VERSION }}-all/${ gradle-dist-hash }/gradle-${{ env.GRADLE_VERSION }}-all.zip"
            # No need to cache this, as it's cached by default, it takes 4-11 seconds only to do it fresh.
            #~/.gradle/wrapper/dists/gradle-${{ env.GRADLE_VERSION }}-all/

            # Prevent "Download https://repo1.maven.org/maven2/" during build
            ~/.gradle/caches/modules-2/

            # Prevent "Generating JAR file 'gradle-api-${{ env.GRADLE_VERSION }}.jar'" during build
            ~/.gradle/caches/${{ env.GRADLE_VERSION }}/generated-gradle-jars/
          key: ${{ runner.os }}-gradle-${{ env.GRADLE_VERSION }}-${{ hashFiles('**/gradle-wrapper.properties', '**/*.gradle*', 'buildSrc/src/**') }}
          restore-keys: |
            ${{ runner.os }}-gradle-${{ env.GRADLE_VERSION }}-


      - name: Check Heroku.
        working-directory: Heroku
        run: ./gradlew --no-daemon --no-build-cache --stacktrace :detekt

      - name: Upload "Heroku Detekt Results".
        if: success() || failure()
        uses: actions/upload-artifact@v3
        with:
          name: Heroku Detekt Results
          path: ${{ github.workspace }}/Heroku/**/build/reports/detekt/detekt.*


      - name: Build Heroku.
        working-directory: Heroku
        run: ./gradlew --no-daemon --no-build-cache --stacktrace assemble testClasses


      - name: Test Heroku.
        working-directory: Heroku
        run: >
          ./gradlew
          --no-daemon
          --no-build-cache
          --stacktrace
          tests :allTestsReport
          -Pnet.twisterrob.build.verboseReports=true
          -Pnet.twisterrob.build.testConcurrencyOverride=PerSuite

      - name: Upload "Heroku Test Results XMLs".
        if: success() || failure()
        uses: actions/upload-artifact@v3
        with:
          name: Heroku Test Results XMLs
          path: ${{ github.workspace }}/Heroku/**/build/test-results/*/TEST-*.xml

      - name: Upload "Heroku Test Results HTML".
        if: success() || failure()
        uses: actions/upload-artifact@v3
        with:
          name: Heroku Test Results HTML
          path: ${{ github.workspace }}/Heroku/build/reports/tests/all/

      - name: Upload "Heroku Test Results HTMLs".
        if: success() || failure()
        uses: actions/upload-artifact@v3
        with:
          name: Heroku Test Results HTMLs
          path: ${{ github.workspace }}/Heroku/**/build/reports/tests/*/

      - name: Cleanup Gradle files before caching.
        run: |
          # Don't cache lock files to prevent breaking future builds
          rm -f  ~/.gradle/caches/modules-2/modules-2.lock
          rm -f  ~/.gradle/caches/modules-2/gc.properties
          rm -fr ~/.gradle/caches/*/plugin-resolution/

  # Separate job for parsing the output,
  # since there are multiple steps when running checks.
  # Expected result: failure() if there were Detekt issues.
  publish-detekt-results-gradle:
    name: 2 ðŸ“¢ Publish Detekt Results
    runs-on: ubuntu-latest
    needs: check-gradle
    # The dependency job might be skipped, we don't need to run this job then.
    if: success() || failure()
    # Should finish under 2 minutes on success, so give it a big buffer in case failures take more time.
    timeout-minutes: 5

    steps:
      # TODEL https://github.com/github/codeql-action/issues/944, need to clone the repo otherwise Detekt doesn't upload.
      - name: Checkout ${{ github.ref }} branch in ${{ github.repository }} repository.
        uses: actions/checkout@v3

      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          name: Heroku Detekt Results
          path: artifacts

      - name: Display structure of downloaded files
        working-directory: artifacts
        run: ls -R

      - name: Fail if there is no report or warnings.
        working-directory: artifacts
        run: |
          # Validate build/reports/detekt/detekt.txt results.
          if [ ! -f 'build/reports/detekt/detekt.txt' ]; then # -f: Path exists and is regular file.
            echo "Detekt report file does not exist"
            exit 2
          fi
          if [ -s 'build/reports/detekt/detekt.txt' ]; then # -s: File has contents.
            echo "There were detekt failures."
            exit 3
          fi

      - name: Publish Detekt Results
        uses: github/codeql-action/upload-sarif@v2
        if: success() || failure()
        with:
          checkout_path: ${{ github.workspace }}
          sarif_file: artifacts/build/reports/detekt/detekt.sarif

  # Separate job for parsing the XML output,
  # since the matrix runs on multiple machines.
  # Expected result: failure() if there were Unit test failures.
  publish-test-results-gradle:
    name: 2 ðŸ“¢ Publish Tests Results
    runs-on: ubuntu-latest
    needs: check-gradle
    # The dependency job might be skipped, we don't need to run this job then.
    if: success() || failure()
    # Should finish under 2 minutes on success, so give it a big buffer in case failures take more time.
    timeout-minutes: 5

    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          name: Heroku Test Results XMLs
          path: artifacts

      - name: Display structure of downloaded files
        working-directory: artifacts
        run: ls -R

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1
        with:
          check_name: 0 ðŸ”” Test Results
          comment_title: Test Results
          report_individual_runs: true
          test_changes_limit: 0
          files: artifacts/**/*.xml

  deps:
    name: Dependencies Diffs
    # Don't execute on master, as it'll just verify against itself.
    if: github.ref != 'refs/heads/master' && (success() || failure())
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: "Determine which PR this commit belongs to, so we can clone its base branch for comparison."
        id: current_pr
        uses: 8BitJonny/gh-get-current-pr@2.0.0
        with:
          # TODEL https://github.com/8BitJonny/gh-get-current-pr/pull/83
          github-token: ${{ github.token }}

      - name: "Pull Request #${{ steps.current_pr.outputs.number }}"
        id: pull_request
        run: |
          # Simulate github.event.pull_request.head.ref on push trigger.
          echo "::set-output name=head_ref::${{ fromJSON(steps.current_pr.outputs.pr).head.ref }}"
          # Simulate github.event.pull_request.base.ref on push trigger.
          echo "::set-output name=base_ref::${{ fromJSON(steps.current_pr.outputs.pr).base.ref }}"


      - name: Checkout ${{ steps.pull_request.outputs.base_ref }} branch in ${{ github.repository }} repository.
        uses: actions/checkout@v3
        with:
          ref: ${{ format('refs/heads/{0}', steps.pull_request.outputs.base_ref) }}

      - name: Get the script from PR (so both head and base run the same command).
        run: |
          git show-ref
          #git fetch
          git show-ref
          git checkout $GITHUB_REF -- scripts/dependencies.sh

      - name: Dump Heroku Dependencies.
        working-directory: Heroku
        run: scripts/dependencies.sh

      - name: Upload "Heroku Dependencies - Previous".
        if: success() || failure()
        uses: actions/upload-artifact@v3
        with:
          name: Heroku Dependencies - Previous
          path: ${{ github.workspace }}/Heroku/dependencies*.txt

      - name: "Debug before checkout"
        run: ls -la

      - name: Checkout ${{ steps.pull_request.outputs.head_ref }} branch in ${{ github.repository }} repository.
        uses: actions/checkout@v3
        with:
          ref: ${{ format('refs/heads/{0}', steps.pull_request.outputs.head_ref) }}

      - name: "Debug after checkout"
        run: ls -la

      - name: Dump Heroku Dependencies.
        working-directory: Heroku
        run: scripts/dependencies.sh

      - name: Upload "Heroku Dependencies".
        if: success() || failure()
        uses: actions/upload-artifact@v3
        with:
          name: Heroku Dependencies
          path: ${{ github.workspace }}/Heroku/dependencies*.txt


      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          name: Heroku Dependencies - Previous
          path: diff/prev

      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          name: Heroku Dependencies
          path: diff/curr

      - name: Diff
        working-directory: diff
        run: |
          # TODEL use Jake's version when https://github.com/JakeWharton/dependency-tree-diff/pull/13 gets merged.
          wget https://github.com/TWiStErRob/dependency-tree-diff/releases/download/1.3.0/dependency-tree-diff.jar
          #wget https://github.com/JakeWharton/dependency-tree-diff/releases/download/1.2.0/dependency-tree-diff.jar
          chmod +x ./dependency-tree-diff.jar
          ./dependency-tree-diff.jar prev/dependencies-root.txt curr/dependencies-root.txt > dependencies-root.txt
          ./dependency-tree-diff.jar prev/dependencies-backend.txt curr/dependencies-backend.txt > dependencies-backend.txt
          ./dependency-tree-diff.jar prev/dependencies-backend-sync.txt curr/dependencies-backend-sync.txt > dependencies-backend-sync.txt
          ./dependency-tree-diff.jar prev/dependencies-backend-feed.txt curr/dependencies-backend-feed.txt > dependencies-backend-feed.txt
          ./dependency-tree-diff.jar prev/dependencies-backend-quickbook.txt curr/dependencies-backend-quickbook.txt > dependencies-backend-quickbook.txt
          ./dependency-tree-diff.jar prev/dependencies-backend-database.txt curr/dependencies-backend-database.txt > dependencies-backend-database.txt
          ./dependency-tree-diff.jar prev/dependencies-backend-network.txt curr/dependencies-backend-network.txt > dependencies-backend-network.txt
          ./dependency-tree-diff.jar prev/dependencies-backend-endpoint.txt curr/dependencies-backend-endpoint.txt > dependencies-backend-endpoint.txt
          ./dependency-tree-diff.jar prev/dependencies-test-helpers.txt curr/dependencies-test-helpers.txt > dependencies-test-helpers.txt

      - name: Merge diffs
        working-directory: diff
        run: |
          # `cat dependencies-*.txt > dependencies-diffs.txt` with a bit more control and fluff.
          # https://stackoverflow.com/a/2817024 + https://stackoverflow.com/a/7816490 + expansion of flags with `man ls` and `man tail`.
          ls --format=single-column --time=ctime --reverse dependencies-*.txt | xargs tail --lines=+1 > dependencies-diffs.txt

      - name: Upload "Heroku Dependencies - Diffs".
        if: success() || failure()
        uses: actions/upload-artifact@v3
        with:
          name: Heroku Dependencies - Diffs
          path: ${{ github.workspace }}/diff/dependencies*.txt

      - name: Create a check run.
        uses: actions/github-script@v6
        with:
          debug: ${{ secrets.ACTIONS_STEP_DEBUG || false }}
          script: |
            const fs = require("fs");
            const diff = fs.readFileSync("diff/dependencies-diffs.txt", {encoding: "utf8"});
            // https://octokit.github.io/rest.js/v18#checks-create
            await github.rest.checks.create({
            	owner: context.repo.owner,
            	repo: context.repo.repo,
            	head_sha: context.sha,
            	name: "Dependency Diff",
            	status: "completed",
            	conclusion: "success",
            	output: {
            		title: "Dependency Report",
            		summary: `
            			## Dependencies Diffs
            			\`\`\`diff
            			${diff}
            			\`\`\`
            		`
            	}
            });

  check-npm:
    name: 1 ðŸ”¨ Build & Check (NPM)
    # https://github.com/actions/virtual-environments/blob/main/images/linux/Ubuntu2004-README.md
    runs-on: ubuntu-20.04
    # Setup takes 1+3+1 minute, and protractor runs for 7 minutes
    timeout-minutes: 15
    env:
      NEO4J_URL: ${{ secrets.NEO4J_URL }}
      PORT: 8080
    steps:
      - name: Checkout ${{ github.ref }} branch in ${{ github.repository }} repository.
        uses: actions/checkout@v3

      # Set the time zone, otherwise 5 Performances display > shows performances tests fail
      # > - Expected By(css selector, .performance) to have text 12:00 but was 11:00
      - uses: szenius/set-timezone@v1.0
        with:
          timezoneLinux: "Europe/London"

      - name: Install Dependencies
        working-directory: Heroku
        run: |
          node -v
          npm -v
          npm install

      - name: Detect Compatible Chrome Driver
        working-directory: Heroku/test/node_modules/webdriver-manager/selenium
        run: |
          google-chrome --version
          grep --version
          curl --version
          echo "Parsing current Chrome version: $(google-chrome --version)"
          export CHROME_FULL_VERSION=$(google-chrome --version)
          echo "CHROME_FULL_VERSION=${CHROME_FULL_VERSION}" | tee --append $GITHUB_ENV
          export CHROME_MINOR_VERSION=$(echo ${CHROME_FULL_VERSION} | grep -oP '(?<=Google Chrome )(\d+\.\d+\.\d+)(?=\.\d+)')
          echo "CHROME_MINOR_VERSION=${CHROME_MINOR_VERSION}" | tee --append $GITHUB_ENV
          echo "Querying latest Chrome Driver version: https://chromedriver.storage.googleapis.com/LATEST_RELEASE_${CHROME_MINOR_VERSION}"
          export CHROME_DRIVER_VERSION=$(curl --output - --silent "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_${CHROME_MINOR_VERSION}")
          echo "CHROME_DRIVER_VERSION=${CHROME_DRIVER_VERSION}" | tee --append $GITHUB_ENV

      - name: Install Compatible Chrome Driver
        working-directory: Heroku/test
        run: |
          npm run selenium:update -- --versions.chrome ${{ env.CHROME_DRIVER_VERSION }}

      - name: Test
        working-directory: Heroku
        run: |
          npm run test
          cd frontend && npm run build:prod

      # Pre-build artifacts for more immediate and deterministic startup.
      - name: Build Frontend
        working-directory: Heroku/frontend
        run: npm run build:dev

      - name: Build Sync & Backend
        working-directory: Heroku
        run: ./gradlew --no-daemon --stacktrace :backend:sync:jar :backend:endpoint:jar

      - name: Start Sync
        working-directory: Heroku
        run: |
          ./gradlew --no-daemon --stacktrace :backend:sync:run >sync.log 2>&1 &
          echo "PID_SYNC=$!" | tee --append $GITHUB_ENV
          sleep 30

      - name: Start Backend
        working-directory: Heroku
        run: |
          ./gradlew --no-daemon --stacktrace :backend:endpoint:run --args "../../deploy/static ../../test/fake-data" >backend.log 2>&1 &
          echo "PID_ENDPOINT=$!" | tee --append $GITHUB_ENV
          sleep 10

      - name: Start Frontend
        working-directory: Heroku/frontend
        run: |
          npm run start >../frontend.log 2>&1 &
          echo "PID_FRONTEND=$!" | tee --append $GITHUB_ENV
          sleep 10

      - name: Start Selenium
        working-directory: Heroku/test
        run: |
          npm run selenium -- --versions.chrome ${{ env.CHROME_DRIVER_VERSION }} >../selenium.log 2>&1 &
          echo "PID_SELENIUM=$!" | tee --append $GITHUB_ENV
          sleep 10

      - name: Run Protractor tests
        working-directory: Heroku/test
        run: |
          mkdir logs
          npm run protractor

      # Note: we always want to kill these processes, and we never care if they actually existed or stopped.
      # `||` at the end ignores the return value, so the step doesn't error but emits a warning instead using:
      # https://docs.github.com/en/actions/reference/workflow-commands-for-github-actions#setting-a-warning-message

      - name: Stop Sync (at ${{ env.PID_SYNC }})
        if: always()
        run: kill ${{ env.PID_SYNC }} || true
        # This will always be true as sync terminates: echo "::warning file=sync.log::Sync process ${{ env.PID_SYNC }} didn't exist."

      - name: Stop Backend (at ${{ env.PID_ENDPOINT }})
        if: always()
        run: kill ${{ env.PID_ENDPOINT }} || echo "::warning file=backend.log::Backend process ${{ env.PID_SYNC }} didn't exist."

      - name: Stop Frontend (at ${{ env.PID_FRONTEND }})
        if: always()
        run: kill ${{ env.PID_FRONTEND }} || echo "::warning file=frontend.log::Frontend process ${{ env.PID_SYNC }} didn't exist."

      - name: Stop Selenium (at ${{ env.PID_SELENIUM }})
        if: always()
        run: kill ${{ env.PID_SELENIUM }} || echo "::warning file=selenium.log::Selenium process ${{ env.PID_SYNC }} didn't exist."

      - name: Upload "Heroku Test Logs".
        if: success() || failure()
        uses: actions/upload-artifact@v3
        with:
          name: Heroku Test Logs
          path: |
            ${{ github.workspace }}/Heroku/*.log
            ${{ github.workspace }}/Heroku/test/logs/*
