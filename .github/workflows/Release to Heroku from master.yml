name: Release to Google App Engine
on:
  pull_request:
  push:
    branches:
      - release
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for release'
        required: false
        default: 'Publish latest changes'
      production:
        description: 'Deploy to production?'
        required: true
        default: false
        type: boolean
jobs:
  release:
    name: Release to Google App Engine (${{ inputs.reason || '<automatic>' }})
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      REF_TO_RELEASE: ${{ github.ref }}
      # Convert input toJSON, because in GitHub Actions: false == null == ''.
      # Convert ternary true part toJSON, to make sure || is not trying to interpret it (toJSON(false) -> 'false' will be truthy).
      RELEASE_TO_PRODUCTION: ${{ toJSON(inputs.production) == 'null' && toJSON(github.ref == 'refs/heads/release') || inputs.production }}
    permissions:
      contents: read  # This is required for actions/checkout.
      # https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/about-security-hardening-with-openid-connect#updating-your-actions-for-oidc
      id-token: write # This is required for requesting the JWT via google-github-actions/auth.
    steps:
      - name: Determine Google App Engine version name.
        id: name
        uses: actions/github-script@v6
        with:
          script: |
            return ${{ env.RELEASE_TO_PRODUCTION }}
              // Use blank to indicate that this is a release to production and should use automatic naming.
              ? ''
              : process.env.REF_TO_RELEASE
                // refs/heads/master
                .replace('refs/heads/', 'h')
                // refs/pull/123/merge
                .replace('refs/pull/', 'pr')
                // ERROR: (gcloud.app.deploy) argument --version/-v: Bad value [...]:
                // May only contain lowercase letters, digits, and hyphens.
                // Must begin and end with a letter or digit. Must not exceed 63 characters.
                .replace(/[^a-z0-9-]/g, '-')

      - name: Parameters
        env:
          inputs: ${{ toJSON(inputs) }}
        run: |
          echo 'github.ref: "${{ github.ref }}"'
          echo 'REF_TO_RELEASE: "${{ env.REF_TO_RELEASE }}"'
          echo 'fallback: ${{ 'false' || 'foo' }}'
          echo 'bang false: ${{ !!'false' }}'
          echo 'bang true: ${{ !!'true' }}'
          echo 'bang empty: ${{ !!'' }}'
          echo 'bang null: ${{ !!null }}'
          echo 'inputs.production val: "${{ inputs.production }}"'
          echo 'inputs.production null: "${{ inputs.production == null }}"'
          echo 'inputs.production empty: "${{ inputs.production == '' }}"'
          echo 'inputs.production true: "${{ inputs.production == true }}"'
          echo 'inputs.production false: "${{ inputs.production == false }}"'
          echo 'inputs.production "true": "${{ inputs.production == 'true' }}"'
          echo 'inputs.production "false": "${{ inputs.production == 'false' }}"'
          echo 'toJSON(inputs.production) val: "${{ toJSON(inputs.production) }}"'
          echo 'toJSON(inputs.production) null: "${{ toJSON(inputs.production) == null }}"'
          echo 'toJSON(inputs.production) empty: "${{ toJSON(inputs.production) == '' }}"'
          echo 'toJSON(inputs.production) true: "${{ toJSON(inputs.production) == true }}"'
          echo 'toJSON(inputs.production) false: "${{ toJSON(inputs.production) == false }}"'
          echo 'toJSON(inputs.production) "true": "${{ toJSON(inputs.production) == 'true' }}"'
          echo 'toJSON(inputs.production) "false": "${{ toJSON(inputs.production) == 'false' }}"'
          echo 'RELEASE_TO_PRODUCTION: "${{ env.RELEASE_TO_PRODUCTION }}"'
          echo 'RELEASE_VERSION: "${{ steps.name.outputs.result  }}"'
          echo 'expr: ${{ inputs.production == '' && github.ref == 'refs/heads/fix259_hosting' || !!inputs.production }}'
          echo "inputs: $inputs"

      - name: Checkout ${{ env.REF_TO_RELEASE }} branch in ${{ github.repository }} repository.
        uses: actions/checkout@v3
        with:
          ref: ${{ env.REF_TO_RELEASE }}

      - name: Validate Gradle Wrapper JARs.
        uses: gradle/wrapper-validation-action@v1

      - name: Authenticate to Google Cloud.
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ secrets.GAE_WIP }}
          service_account: ${{ secrets.GAE_SA }}
      - name: Print tooling versions.
        run: |
          node -v
          npm -v
          java -version
          gcloud --version

      - name: Build Frontend.
        working-directory: Heroku
        env:
          NODE_ENV: production
          # Install `devDependencies`, so `npm build` runs `webpack` correctly.
          NPM_CONFIG_PRODUCTION: false
        run: |
          npm install
          cd frontend
          npm run build:prod

      - name: Build Backend.
        working-directory: Heroku
        run: >
          ./gradlew
          :backend:endpoint:jar

      - name: Publish ${{ steps.name.outputs.result }} to Google App Engine (production=${{ env.RELEASE_TO_PRODUCTION }}).
        working-directory: Heroku
        env:
          # Use pre-existing SDK, don't download a new one.
          GCLOUD_HOME: /usr/lib/google-cloud-sdk
          # Will be propagated to app.yml
          NEO4J_URL: ${{ secrets.NEO4J_URL }}
        run: >
          ./gradlew
          :deploy:appengine:appengineDeploy
          -Pnet.twisterrob.build.deployReplaceLive=${{ env.RELEASE_TO_PRODUCTION }}
          -Pnet.twisterrob.build.deployName=${{ steps.name.outputs.result }}
