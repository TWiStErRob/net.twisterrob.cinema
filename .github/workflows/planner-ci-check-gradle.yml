name: "🔨 Build & Check (Gradle)"
on:
  workflow_call:

jobs:

  # Expected result: success() or failure().
  # If a static check fails, it'll be reported separately.
  # If a test fails, this will fail. TODO move to reporting.
  check:
    name: "🐘 Gradle"
    timeout-minutes: 30

    permissions:
      # actions/checkout
      contents: read
      # EnricoMi/publish-unit-test-result-action -> https://github.com/EnricoMi/publish-unit-test-result-action#permissions
      checks: write
      # github/codeql-action/upload-sarif
      security-events: write

    env:
      # Set up URL so that Dagger can create the default component. It shouldn't be used in tests anyway.
      NEO4J_URL: neo4j+s://neo4j-fake-user:neo4j-fake-password@neo4j-fake-host

    runs-on: ubuntu-24.04
    defaults:
      run:
        shell: bash

    steps:

      - name: "Checkout ${{ github.ref }} branch in ${{ github.repository }} repository."
        uses: actions/checkout@v4

      - name: "Set up Java."
        uses: actions/setup-java@v4
        with:
          java-version-file: planner/.java-version
          distribution: temurin

      - name: "Set up Gradle."
        uses: gradle/actions/setup-gradle@v4

      - name: "Build Planner."
        working-directory: planner
        run: >
          ./gradlew
          --no-daemon
          --no-build-cache
          --stacktrace
          --continue
          assemble
          testClasses
          unitTestClasses
          functionalTestClasses
          integrationTestClasses
          integrationExternalTestClasses

      - name: "Check Planner with Detekt."
        working-directory: planner
        run: >
          ./gradlew
          --no-daemon
          --no-build-cache
          --stacktrace
          --continue
          detektEach
          :detektReportMergeSarif

      - name: "Upload 'Detekt Results'."
        if: ${{ success() || failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: 'Detekt Results'
          if-no-files-found: error
          path: planner/**/build/reports/detekt/*

      - name: "Publish 'detekt' GitHub Code Scanning analysis."
        uses: github/codeql-action/upload-sarif@v3
        if: ${{ success() || failure() }}
        with:
          sarif_file: ${{ github.workspace }}/planner/build/reports/detekt/merge.sarif


      - name: "Test Planner."
        working-directory: planner
        run: >
          ./gradlew
          --no-daemon
          --no-build-cache
          --stacktrace
          --continue
          :test-reports:allAggregateTestReport
          -Pnet.twisterrob.build.verboseReports=true
          -Pnet.twisterrob.build.testConcurrencyOverride=PerSuite

      - name: "Upload 'Test Results XMLs' artifact."
        if: ${{ success() || failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: 'Test Results XMLs'
          if-no-files-found: error
          path: planner/**/build/test-results/*/TEST-*.xml

      - name: "Upload 'Test Results HTML' artifact."
        if: ${{ success() || failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: 'Test Results HTML'
          if-no-files-found: error
          path: planner/test-reports/build/reports/tests/all/aggregated-results/

      - name: "Upload 'Test Results HTMLs' artifact."
        if: ${{ success() || failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: 'Test Results HTMLs'
          if-no-files-found: error
          path: planner/**/build/reports/tests/*/

      - name: "Publish '🔔 Test Results' check run."
        if: ${{ success() || failure() }}
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          check_name: '🔔 Test Results'
          comment_mode: off
          report_individual_runs: true
          action_fail_on_inconclusive: true
          test_changes_limit: 0
          junit_files: ${{ github.workspace }}/planner/**/build/test-results/*/TEST-*.xml

      - name: "Cleanup Gradle files before caching."
        run: |
          # Don't cache lock files to prevent breaking future builds
          rm -f  ~/.gradle/caches/modules-2/modules-2.lock
          rm -f  ~/.gradle/caches/modules-2/gc.properties
          rm -fr ~/.gradle/caches/*/plugin-resolution/
